## Next 13 이후에 바뀐 점

### pages router → app router

- 디렉토리 라우팅이 편해짐
- 레이아웃 기능
- 페이지별 권한 체크 (관리자 / 유저)
    - app router 미들 웨어
- react 18 버전 →  `서버 컴포넌트` 분리로 인한 최적화
    - 장점 : HTML 로딩 시간, JS 용량 감소
    - 단점 : Next 서버 자체의 부담 증가 → 이에 따라 ‘캐시’ 적극 활용

## 클론 코딩의 장단점

### 유의할 점

- 뇌를 빼고 하면 안된다.
- 클론코딩한 결과물을 포트폴리오로 쓰지마라
    - 배운 기술을 바탕으로 다른 프로젝트에 활용

### 장점

- 우수한 개발자들이 만든 훌륭한 소스를 습득할 수 있다.
- 아이디어가 떠오르지 않을때 좋다
- 강제성이 생긴다
- PoC가 필요없다
- 따라하면서 여러가지의 방법을 사용 → 특히, 공식문서 활용하기 좋음
    - `공식문서에 나와있는 내용들을 올바르게 적용했는지 확인가능`

## 리액트 압축 요약

### 역사

- 페이스북이 개발
- 점유율 1위
- jQuery → Angular → React → Vue → Svelte
- 리액트가 1등인 이유
    - 뷰, 스벨트가 좋긴 하지만 넘어갈만큼 압도적으로 좋진 않음
    - 페이지 전환 없이 앱 같은 느낌을 원함
        - 한 페이지에서 다하는 `SPA` 방식이 유행
            - 데이터 유지가 좋음
    - 프론트의 비중이 높아졌다(`데이터를 많이 다룬다`)
        - MVC 아키텍쳐가 도입 → 프론트에 적합하지 않음(Angular)
        - FLUX 패턴 도입 : 1way binding
            - 데이터가 바뀌었을때 추적이 쉬워짐
            - 대규모에 적합함
        
        ![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/75ae365e-1848-48d7-9b32-ebbeca4760d9/da357dc6-9008-4f23-b58c-08de85899a2e/Untitled.png)
        

- 컴포넌트 기반으로 개발
    - JSX → js와 html을 결합
        - 브라우저는 jsx를 인식하지 못함
            - 바벨, 웹팩, vite, swc 등의 툴을 사용해 js로 변환

### ~~2강(state,JSX), 3강(props), 4강(useEffect) 생략~~

## 질문 하는법

### 나쁜 질문

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/75ae365e-1848-48d7-9b32-ebbeca4760d9/afdaa3c7-a4e9-4ae2-9690-a0dc357316a5/Untitled.png)

### 유의사항

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/75ae365e-1848-48d7-9b32-ebbeca4760d9/003a8430-9ae1-4fb4-8cf3-32dd6ed6b9b2/Untitled.png)

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/75ae365e-1848-48d7-9b32-ebbeca4760d9/a57371e6-18cf-4374-a495-856953f3d1ab/Untitled.png)

## 효율적으로 강의를 듣는법

- 따라치는 강의가 아님 → 코드양이 많아 시간이 3배이상 소요된다
- 깃허브에서 코드를 가져와서 순차적으로 흐름을 파악
- 직접 클론코딩을 해보고 강좌 정답지로 활용

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/75ae365e-1848-48d7-9b32-ebbeca4760d9/188a9507-8880-41d9-9d0d-119bfbdb2be8/Untitled.png)

# 따로 공부해본 것

---

- 바벨, swc → 처음 들어봄

> **바벨이란?**
> 
> 
> [바벨 공식문서](https://babeljs.io/)에서는 바벨을 자바스크립트 컴파일러라고 소개하며 최신 자바스크립트 문법을 사용할 수 있다고 나와있다. 더 정확하게 말하면 `트랜스파일러`라고 말할 수 있다. (트랜스파일러는 한 언어로 작성된 소스 코드를 비슷한 수준의 추상화를 가진 언어로 변환하는 것을 말하며 컴파일러의 일종이다)
> 

> **3-1. SWC는 왜 빠를까요?**
> 
> 
> Next.js에서는 SWC를 기반으로 개발한 컴파일러를 통해 기존 빌드에 활용하던 바벨과 Terser를 대체합니다. 즉, Next.js의 빌드 과정 중 **`트랜스파일링`**을 수행했던 바벨과, **`코드 경량화`**를 수행했던 Terser가 SWC로 대체된다는 뜻입니다. SWC로 교체함으로써 트랜스파일링은 무려 17배나 빨라졌다고 하며, 코드 경량화 작업은 7배가 빨라졌다고 합니다.
> 
> 그렇다면, SWC라는 툴이 바벨이나 Terser보다 월등하게 빠른 이유가 대체 뭘까요? 가장 큰 이유는 바로 Rust라는 프로그래밍 언어가 **`이벤트 루프 기반의 싱글 스레드 언어`**인 자바스크립트와는 다르게 **`병렬 처리`**를 고려해서 설계된 언어라는 점입니다.
> 

# 느낀점

---

- 리액트 점유율이 높은데에는 이유가 있었음
    - SPA의 장점
        - 페이지 전환없이 넘어가는 앱 같은 느낌을 주고
        - 데이터 유지에 좋다
- 프레임워크가 개선,발전된다고 해서 바로 넘어가지는 않는다
- 프론트엔드에도 MVC, FLUX 등의 디자인패턴이 적용된다